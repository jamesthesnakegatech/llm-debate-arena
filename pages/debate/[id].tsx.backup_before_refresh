import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import { GetServerSideProps } from 'next'
import { prisma } from '../../lib/prisma'
import { useSocket } from '../../hooks/useSocket'
import TypingIndicator from '../../components/TypingIndicator'

interface Turn {
  id: string
  llmName: string
  message: string
  turnNumber: number
  createdAt: string
}

interface DebateData {
  id: string
  topic: string
  llm1Name: string
  llm2Name: string
  llm1Position: string
  llm2Position: string
  status: string
  winner?: string
  turns: Turn[]
  voteCount: {
    llm1: number
    llm2: number
    tie: number
    bothBad: number
  }
}

interface Props {
  debate: DebateData
}

export default function DebatePage({ debate: initialDebate }: Props) {
  const router = useRouter()
  const [debate, setDebate] = useState<DebateData>(initialDebate)
  const [isStarting, setIsStarting] = useState(false)
  const [isGenerating, setIsGenerating] = useState(false)
  const [showVoting, setShowVoting] = useState(false)
  const [selectedWinner, setSelectedWinner] = useState<string>('')
  const [voteReasoning, setVoteReasoning] = useState('')
  const [hasVoted, setHasVoted] = useState(false)
  
  // Real-time updates
  const socket = useSocket(debate.id)

  const MAX_TURNS = 6 // 3 turns per LLM

  useEffect(() => {
    // Check if user has already voted (using session storage)
    const votedDebates = JSON.parse(sessionStorage.getItem('votedDebates') || '[]')
    if (votedDebates.includes(debate.id)) {
      setHasVoted(true)
    }
    
    // Auto-show voting if debate is complete
    if (debate.status === 'completed' && debate.turns.length >= MAX_TURNS) {
      setShowVoting(true)
    }
  }, [debate.id, debate.status, debate.turns.length])

  // Socket event listeners
  useEffect(() => {
    if (!socket) return

    socket.on('debate-updated', (updatedDebate) => {
      setDebate(updatedDebate.debate || updatedDebate)
      setIsGenerating(false)
    })

    socket.on('new-turn', (newTurn) => {
      setDebate(prev => ({
        ...prev,
        turns: [...prev.turns, newTurn]
      }))
      setIsGenerating(false)
      
      // Check if debate is complete
      if (newTurn.turnNumber >= MAX_TURNS) {
        setTimeout(() => setShowVoting(true), 1000)
      }
    })

    socket.on('vote-updated', (voteData) => {
      setDebate(prev => ({
        ...prev,
        voteCount: voteData.voteCount
      }))
    })

    return () => {
      socket.off('debate-updated')
      socket.off('new-turn')
      socket.off('vote-updated')
    }
  }, [socket])

  // Auto-continue debate
  useEffect(() => {
    if ((debate.status === 'in_progress' || (debate.status === 'in_progress' || debate.status === 'active')) && 
        debate.turns.length > 0 && 
        debate.turns.length < MAX_TURNS && 
        !isGenerating && 
        !showVoting) {
      // Auto-continue after a delay
      const timer = setTimeout(() => {
        continueDebate();
      }, 3000); // 3 seconds between turns
      
      return () => clearTimeout(timer);
    }
  }, [debate.turns.length, debate.status, isGenerating, showVoting]);

  const startDebate = async () => {
    setIsStarting(true)
    try {
      const response = await fetch(`/api/debate/${debate.id}/start`, {
        method: 'POST'
      })
      const data = await response.json()
      
      if (data.success) {
        // Refresh the page to show the first turn
        // router.reload() - removed for auto-continue
        if (data.turn) {
          setDebate(prev => ({
            ...prev,
            status: "in_progress",
            turns: [data.turn]
          }));
        }
      } else {
        alert(`Error: ${data.error}`)
      }
    } catch (error) {
      alert('Failed to start debate')
      console.error(error)
    } finally {
      setIsStarting(false)
    }
  }

  const continueDebate = async () => {
    if (debate.turns.length >= MAX_TURNS) {
      setShowVoting(true)
      return
    }

    setIsGenerating(true)
    try {
      const response = await fetch(`/api/debate/${debate.id}/continue`, {
        method: 'POST'
      })
      const data = await response.json()
      
      if (data.success) {
        // Add the new turn to the debate
        setDebate(prev => ({
          ...prev,
          turns: [...prev.turns, data.newTurn]
        }))
        
        // If we've reached max turns, show voting
        if (debate.turns.length + 1 >= MAX_TURNS) {
          setTimeout(() => setShowVoting(true), 1000)
        }
      } else {
        alert(`Error: ${data.error}`)
      }
    } catch (error) {
      alert('Failed to continue debate')
      console.error(error)
    } finally {
      setIsGenerating(false)
    }
  }

  const submitVote = async () => {
    if (!selectedWinner) {
      alert('Please select a winner')
      return
    }

    try {
      const response = await fetch(`/api/debate/${debate.id}/vote`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          winner: selectedWinner,
          reasoning: voteReasoning
        })
      })

      const data = await response.json()
      
      if (data.success) {
        // Mark as voted in session storage
        const votedDebates = JSON.parse(sessionStorage.getItem('votedDebates') || '[]')
        votedDebates.push(debate.id)
        sessionStorage.setItem('votedDebates', JSON.stringify(votedDebates))
        
        setHasVoted(true)
        setShowVoting(false)
        
        // Update vote counts
        setDebate(prev => ({
          ...prev,
          voteCount: data.voteCount
        }))
      } else {
        alert(`Error: ${data.error}`)
      }
    } catch (error) {
      alert('Failed to submit vote')
      console.error(error)
    }
  }

  const getLLMColor = (llmName: string) => {
    return llmName === debate.llm1Name ? 'blue' : 'red'
  }

  const getPositionBadge = (llmName: string) => {
    const position = llmName === debate.llm1Name ? debate.llm1Position : debate.llm2Position
    const color = position === 'pro' ? 'green' : 'orange'
    return (
      <span className={`px-2 py-1 text-xs font-medium rounded-full bg-${color}-100 text-${color}-800`}>
        {position.toUpperCase()}
      </span>
    )
  }

  return (
    <>
      <Head>
        <title>Debate: {debate.topic.slice(0, 50)}... | LLM Arena</title>
      </Head>

      <div className="min-h-screen bg-gray-50">
        <div className="container mx-auto px-4 py-8 max-w-4xl">
          {/* Header */}
          <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
            <div className="flex items-center justify-between mb-4">
              <button
                onClick={() => router.push('/')}
                className="text-blue-600 hover:text-blue-800 font-medium"
              >
                ‚Üê Back to Arena
              </button>
              <span className={`px-3 py-1 rounded-full text-sm font-medium ${
                (debate.status === 'created' || debate.status === 'pending') ? 'bg-yellow-100 text-yellow-800' :
                (debate.status === 'in_progress' || debate.status === 'active') ? 'bg-green-100 text-green-800' :
                'bg-gray-100 text-gray-800'
              }`}>
                {debate.status.charAt(0).toUpperCase() + debate.status.slice(1)}
              </span>
            </div>
            
            <h1 className="text-2xl font-bold text-gray-900 mb-4">
              {debate.topic}
            </h1>

            {/* Debaters */}
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-lg font-semibold text-blue-900">
                  {debate.llm1Name}
                </div>
                {getPositionBadge(debate.llm1Name)}
              </div>
              <div className="text-center p-4 bg-red-50 rounded-lg">
                <div className="text-lg font-semibold text-red-900">
                  {debate.llm2Name}
                </div>
                {getPositionBadge(debate.llm2Name)}
              </div>
            </div>
          </div>

          {/* Debate Status Actions */}
          {(debate.status === 'created' || debate.status === 'pending') && (
            <div className="bg-white rounded-lg shadow-sm p-6 mb-6 text-center">
              <h2 className="text-xl font-semibold mb-4">Ready to Start the Debate?</h2>
              <p className="text-gray-600 mb-4">
                The AI models will debate this topic with {MAX_TURNS / 2} rounds each.
              </p>
              <button
                onClick={startDebate}
                disabled={isStarting}
                className="px-6 py-3 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 disabled:opacity-50"
              >
                {isStarting ? 'Starting...' : 'Start Debate üöÄ'}
              </button>
            </div>
          )}

          {/* Debate Turns */}
          {debate.turns.length > 0 && (
            <div className="space-y-4 mb-6">
              {(debate.turns || []).filter(turn => turn && turn.llmName).map((turn, index) => {
                const color = getLLMColor(turn.llmName)
                const isLlm1 = turn.llmName === debate.llm1Name
                
                return (
                  <div
                    key={turn.id}
                    className={`flex ${isLlm1 ? 'justify-start' : 'justify-end'} debate-message`}
                  >
                    <div className={`max-w-3xl ${isLlm1 ? 'mr-12' : 'ml-12'}`}>
                      <div className={`p-4 rounded-lg ${
                        color === 'blue' ? 'bg-blue-100 border-l-4 border-blue-500' : 
                        'bg-red-100 border-r-4 border-red-500'
                      }`}>
                        <div className="flex items-center justify-between mb-2">
                          <span className={`font-semibold ${
                            color === 'blue' ? 'text-blue-900' : 'text-red-900'
                          }`}>
                            {turn.llmName}
                          </span>
                          <span className="text-sm text-gray-500">
                            Turn {turn.turnNumber}
                          </span>
                        </div>
                        <p className="text-gray-800 leading-relaxed whitespace-pre-wrap">
                          {turn.message}
                        </p>
                      </div>
                    </div>
                  </div>
                )
              })}
              
              {/* Typing Indicator */}
              {isGenerating && (
                <TypingIndicator
                  llmName={debate.turns.length % 2 === 0 ? debate.llm1Name : debate.llm2Name}
                  color={debate.turns.length % 2 === 0 ? 'blue' : 'red'}
                />
              )}
            </div>
          )}

          {/* Generate Next Turn */}
          {(debate.status === 'in_progress' || debate.status === 'active') && debate.turns.length > 0 && debate.turns.length < MAX_TURNS && !showVoting && (
            <div className="bg-white rounded-lg shadow-sm p-6 text-center mb-6">
              <button
                onClick={continueDebate}
                disabled={isGenerating}
                className="px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg hover:bg-purple-700 disabled:opacity-50"
              >
                {isGenerating ? (
                  <span className="flex items-center">
                    <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                    Generating Response...
                  </span>
                ) : (
                  `Next Turn (${debate.turns.length + 1}/${MAX_TURNS})`
                )}
              </button>
            </div>
          )}

          {/* Voting Interface */}
          {showVoting && !hasVoted && (
            <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
              <h2 className="text-xl font-semibold mb-4">Vote for the Winner! üó≥Ô∏è</h2>
              <p className="text-gray-600 mb-4">
                Which AI made the most convincing arguments?
              </p>
              
              <div className="space-y-3 mb-4">
                <label className="flex items-center space-x-3 cursor-pointer p-3 border rounded-lg hover:bg-gray-50">
                  <input
                    type="radio"
                    name="winner"
                    value="llm1"
                    checked={selectedWinner === 'llm1'}
                    onChange={(e) => setSelectedWinner(e.target.value)}
                    className="h-4 w-4 text-blue-600"
                  />
                  <span className="font-medium">{debate.llm1Name}</span>
                </label>
                
                <label className="flex items-center space-x-3 cursor-pointer p-3 border rounded-lg hover:bg-gray-50">
                  <input
                    type="radio"
                    name="winner"
                    value="llm2"
                    checked={selectedWinner === 'llm2'}
                    onChange={(e) => setSelectedWinner(e.target.value)}
                    className="h-4 w-4 text-red-600"
                  />
                  <span className="font-medium">{debate.llm2Name}</span>
                </label>
                
                <label className="flex items-center space-x-3 cursor-pointer p-3 border rounded-lg hover:bg-gray-50">
                  <input
                    type="radio"
                    name="winner"
                    value="tie"
                    checked={selectedWinner === 'tie'}
                    onChange={(e) => setSelectedWinner(e.target.value)}
                    className="h-4 w-4 text-gray-600"
                  />
                  <span className="font-medium">It's a Tie</span>
                </label>
                
                <label className="flex items-center space-x-3 cursor-pointer p-3 border rounded-lg hover:bg-gray-50">
                  <input
                    type="radio"
                    name="winner"
                    value="bothBad"
                    checked={selectedWinner === 'bothBad'}
                    onChange={(e) => setSelectedWinner(e.target.value)}
                    className="h-4 w-4 text-orange-600"
                  />
                  <span className="font-medium">Both arguments were weak üëé</span>
                </label>
              </div>

              <textarea
                placeholder="Why did you vote this way? (optional)"
                value={voteReasoning}
                onChange={(e) => setVoteReasoning(e.target.value)}
                className="w-full p-3 border rounded-lg mb-4 h-20 resize-none"
              />

              <button
                onClick={submitVote}
                disabled={!selectedWinner}
                className="w-full py-3 bg-green-600 text-white font-semibold rounded-lg hover:bg-green-700 disabled:opacity-50"
              >
                Submit Vote
              </button>
            </div>
          )}

          {/* Vote Results */}
          {hasVoted && (
            <div className="bg-white rounded-lg shadow-sm p-6">
              <h2 className="text-xl font-semibold mb-4">Current Results üìä</h2>
              <div className="space-y-3">
                <div className="flex justify-between items-center">
                  <span className="font-medium">{debate.llm1Name}</span>
                  <span className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full">
                    {debate.voteCount.llm1} votes
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="font-medium">{debate.llm2Name}</span>
                  <span className="px-3 py-1 bg-red-100 text-red-800 rounded-full">
                    {debate.voteCount.llm2} votes
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="font-medium">Tie</span>
                  <span className="px-3 py-1 bg-gray-100 text-gray-800 rounded-full">
                    {debate.voteCount.tie} votes
                  </span>
                </div>
                <div className="flex justify-between items-center">
                  <span className="font-medium">Both Weak üëé</span>
                  <span className="px-3 py-1 bg-orange-100 text-orange-800 rounded-full">
                    {debate.voteCount.bothBad || 0} votes
                  </span>
                </div>
              </div>
              
              <div className="mt-4 pt-4 border-t">
                <button
                  onClick={() => router.push('/')}
                  className="w-full py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700"
                >
                  Start Another Debate
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const { id } = context.params!
  
  try {
    const debate = await prisma.debate.findUnique({
      where: { id: id as string },
      include: {
        turns: {
          orderBy: { turnNumber: 'asc' }
        },
        votes: true
      }
    })

    if (!debate) {
      return {
        notFound: true
      }
    }

    // Calculate vote counts
    const voteCount = {
      llm1: debate.votes.filter(v => v.winner === 'llm1').length,
      llm2: debate.votes.filter(v => v.winner === 'llm2').length,
      tie: debate.votes.filter(v => v.winner === 'tie').length,
      bothBad: debate.votes.filter(v => v.winner === 'bothBad').length
    }

    // Properly serialize all dates and omit votes
    const { votes, ...debateWithoutVotes } = debate
    const serializedDebate = {
      ...debateWithoutVotes,
      createdAt: debate.createdAt.toISOString(),
      updatedAt: debate.updatedAt.toISOString(),
      turns: debate.turns.map(turn => ({
        ...turn,
        createdAt: turn.createdAt.toISOString()
      })),
      voteCount
    }

    return {
      props: {
        debate: serializedDebate
      }
    }
  } catch (error) {
    console.error('Error fetching debate:', error)
    return {
      notFound: true
    }
  }
}
